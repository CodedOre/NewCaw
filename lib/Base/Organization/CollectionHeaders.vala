/* CollectionHeaders.vala
 *
 * Copyright 2023 Frederick Schenk
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

using GLib;

/**
 * An interface for Collection providing custom headers.
 *
 * A header item is added by a array of strings. Each string
 * generates a HeaderItem object, which will be placed in the collection.
 * These items can be used by an client to add special widgets to a ListView.
 */
public interface Backend.CollectionHeaders : Backend.Collection<Object> {

  /**
   * The strings used to generated the items.
   */
  public abstract string[] headers { get; construct; }

  /**
   * Generates the headers from the property.
   *
   * Should be run on construction of implementing classes.
   *
   * @return The header items to be added to the collection.
   */
  protected HeaderItem[] generate_headers () {
    HeaderItem[] items = {};
    uint header_i = 0;
    foreach (string title in headers) {
      items += new HeaderItem (header_i, title);
      header_i++;
    }
    return items;
  }

}

/**
 * A header item generated by CollectionHeaders.
 */
public class Backend.HeaderItem : Object {

  /**
   * An index used while sorting the collection to order multiple HeaderItems.
   */
  public uint index { get; construct; }

  /**
   * An description for the UI to place the right widget.
   */
  public string description { get; construct; }

  /**
   * Creates an instance of this object.
   *
   * @param index An index used while sorting the collection to order multiple HeaderItems.
   * @param description An description for the UI to place the right widget.
   */
  internal HeaderItem (uint index, string description) {
    Object (
      index: index,
      description: description
    );
  }

}
